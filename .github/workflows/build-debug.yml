name: build-debug

on:
  push:
    branches:
      - "**"
    tags:
      - "!*" # not a tag push
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build-dotnet:
    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[ci skip]'))"
    strategy:
      matrix:
        dotnet: ["3.1.202"] # support latest only
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      # build
      - run: dotnet build ./src/MagicOnion/ -c Debug
      - run: dotnet build ./src/MagicOnion.Abstractions/ -c Debug
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Debug
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Debug
      - run: dotnet build ./src/MagicOnion.Redis/ -c Debug
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Debug
      - run: dotnet build ./src/MagicOnion.MSBuild.Tasks/ -c Debug
      - run: dotnet build ./src/MagicOnion.Generator/ -c Debug
      - run: dotnet build ./src/MagicOnion.Server.Authentication/ -c Debug
      # test
      - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Debug
      - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Debug

  build-unity:
    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[ci skip]'))"
    strategy:
      matrix:
        unity: ["2019.3.9f1", "2020.1.0b5"]
        include:
          - unity: 2019.3.9f1
            license: UNITY_2019_3
          - unity: 2020.1.0b5
            license: UNITY_2020_1
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      # https://hub.docker.com/r/gableroux/unity3d/tags
      image: gableroux/unity3d:${{ matrix.unity }}-linux-il2cpp
    steps:
      - run: apt-get update && apt-get install git -y
      - uses: actions/checkout@v2
      # get activation file, if fail to activate unity, use this key and activate from https://license.unity3d.com/manual
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0
      - uses: actions/upload-artifact@v1
        with:
          name: Unity_v${{ matrix.unity }}.alf
          path: ./Unity_v${{ matrix.unity }}.alf
      # activate Unity from manual license file(ulf)
      - run: echo -n "$UNITY_LICENSE" >> .Unity.ulf
        env:
          UNITY_LICENSE: ${{ secrets[matrix.license] }}
      - name: Activate Unity, always returns a success. But if a subsequent run fails, the activation may have failed(if succeeded, shows `Next license update check is after` and not shows other message(like GUID != GUID). If fails not). In that case, upload the artifact's .alf file to https://license.unity3d.com/manual to get the .ulf file and set it to secrets.
        run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .Unity.ulf || exit 0

      # todo: prepare runtime unit test
      # Execute scripts: RuntimeUnitTestToolkit
      # - name: Build UnitTest(Linux64, mono)
      #   run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod UnitTestBuilder.BuildUnitTest /headless /ScriptBackend mono /BuildTarget StandaloneLinux64
      #   working-directory: src/ZLogger.Unity
      # - name: Execute UnitTest
      #   run: ./src/ZLogger.Unity/bin/UnitTest/StandaloneLinux64_Mono2x/test

      # execute scripts/Export Package
      - name: Export unitypackage
        run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
        working-directory: src/MagicOnion.Client.Unity

      # Store artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: MagicOnion.Client.Unity.${{ matrix.unity }}.unitypackage
          path: ./src/MagicOnion.Client.Unity/MagicOnion.Client.Unity.unitypackage
